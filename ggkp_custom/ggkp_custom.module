<?php

use Drupal\search_api\Query\QueryInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Views\ViewExecutable;
use Drupal\Views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Views;
use Drupal\taxonomy;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\block\Entity\Block;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Component\Utility\UrlHelper;
use Drupal\node\NodeInterface;
use Drupal\domain_access\DomainAccessManagerInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Database\Query\ConditionInterface;
Use Drupal\user\Entity\User;
use Symfony\Component\HttpFoundation\Request;
use Drupal\Core\StreamWrapper\PublicStream;
use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\file\Entity\File;
use Drupal\paragraphs\Entity\Paragraph;


/**
 * Implements hook_form_alter().
 * Custom Submit handler for login form
 */
function ggkp_custom_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  $form['#submit'][] = '_ggkp_dashboard_user_login_submit';
}
/**
 * Form submission handler for user_login_form().
 *
 * Redirects the user to the dashboard after logging in.
 *
 */
function _ggkp_dashboard_user_login_submit(&$form, FormStateInterface $form_state) {

  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();
  $request = \Drupal::service('request_stack')->getCurrentRequest();
  $loader = \Drupal::service('domain.negotiator');
  $current_domain = $loader->getActiveDomain();
  $current_domain_id = $current_domain->id();
  if (!$request->request->has('destination')) {
    if (in_array('administrator', $roles) || in_array('ggkp_admin', $roles) || in_array('ggkp_admin_level_2', $roles))  {
      if ($current_domain_id == 'gef_islands_domain' || $current_domain_id == 'spar6c') {
        \Drupal::service('request_stack')->getCurrentRequest()->query->set('destination', '/initiative/dashboard');
      }
      else {
        \Drupal::service('request_stack')->getCurrentRequest()->query->set('destination', '/dashboard');
      }
    }
  }
  else {
    $request->query->set('destination', $request->request->get('destination'));
  }
}

/**
 * Implements hook_form_alter().
 */
function ggkp_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $loader = \Drupal::service('domain.negotiator');
  $current_domain = $loader->getActiveDomain();
  $current_domain_id = $current_domain->id();
  $roles = \Drupal::currentUser()->getRoles();
  //After editing redirect back to dashboard - Need to add GEF islands and SPARC
  if ($form_id == 'entity_subqueue_homepage_hero_gip_edit_form' || $form_id == 'entity_subqueue_ggip_homepage_insights_edit_form' || $form_id == 'entity_subqueue_about_coordinators_edit_form' || $form_id == 'entity_subqueue_about_secretariat_edit_form'
      || $form_id == 'entity_subqueue_senior_advisory_group_edit_form' || $form_id == 'entity_subqueue_about_steering_committee_edit_form' || $form_id == 'entity_subqueue_featured_case_studies_edit_form' || $form_id == 'entity_subqueue_featured_events_ggfp_edit_form'
      || $form_id == 'entity_subqueue_featured_events_ggip_edit_form' || $form_id == 'entity_subqueue_featured_events_ggkp_edit_form' || $form_id == 'entity_subqueue_featured_learning_edit_form' || $form_id == 'entity_subqueue_featured_national_document_ggfp_edit_form'
      || $form_id == 'entity_subqueue_featured_national_document_ggip_edit_form' || $form_id == 'entity_subqueue_featured_national_document_ggkp_edit_form' || $form_id == 'entity_subqueue_featured_research_edit_form' || $form_id == 'entity_subqueue_featured_resource_ggfp_edit_form'
      || $form_id == 'entity_subqueue_featured_resource_ggip_edit_form' || $form_id == 'entity_subqueue_featured_sector_edit_form' || $form_id == 'entity_subqueue_gfp_banking_edit_form' || $form_id == 'entity_subqueue_gfp_discover_edit_form'
      || $form_id == 'entity_subqueue_gfp_insurance_edit_form' || $form_id == 'entity_subqueue_gfp_investment_edit_form' || $form_id == 'entity_subqueue_business_sectors_edit_form' || $form_id == 'entity_subqueue_gip_discover_edit_form'
      || $form_id == 'entity_subqueue_green_recovery_hub_edit_form' || $form_id == 'entity_subqueue_green_recovery_hub_support_progr_edit_form' || $form_id == 'entity_subqueue_homepage_hero_edit_form' || $form_id == 'entity_subqueue_homepage_hero_gfp_edit_form'
      || $form_id == 'entity_subqueue_homepage_hero_gip_edit_form' || $form_id == 'entity_subqueue_ggfp_homepage_insights_edit_form' || $form_id == 'entity_subqueue_ggip_homepage_insights_edit_form' || $form_id == 'entity_subqueue_menu_featured_themes__edit_form'
      || $form_id == 'entity_subqueue_sectors_edit_form' || $form_id == 'entity_subqueue_working_groups_megamenu_edit_form' ) {
    $roles = \Drupal::currentUser()->getRoles();
    if (!(in_array('administrator', $roles))) {
      $form['#action'] = $form['#action'] . '?destination=/dashboard';
    }
  }

  // To get the project title
  if ($form_id == "contact_message_project_information_contact_form") {
	  $url = '/projects/browse';
	  $form['#prefix'] = '<div class="sub-title">You can send a message regarding Project information using the contact form below.</div>';
	  $default_subject =\Drupal::request()->query->all();
	  $default_subject  = array_keys($default_subject);
    if (isset($default_subject[0]) && $default_subject[0] != '') {
      $subject = $default_subject[0];
      $sub = explode("/", $subject);
      $count = count($sub);
      $node = Node::load($sub[$count - 1]);
      if (isset($node) && $node != '') {
        $title = $node->get('title')->value;
        $form['subject']['widget'][0]['value']['#default_value'] = 'Update Request: ' . $title;
      }
      else {
	      $response = new RedirectResponse($url);
	      if (isset($response)) {
		      $response->send();
		      exit(0);
	      }
	    }
    }
  else {
      $response = new RedirectResponse($url);
      if (isset($response)) {
        $response->send();
        exit(0);
      }
	  }
  }

  // Hide following fields from GPP and GFP
  if ($current_domain_id == "ggkp_domain" || $current_domain_id == "ggfp_domain") {
    if ($form_id == "node_academic_programme_form" || $form_id == "node_academic_programme_edit_form" || $form_id == "node_blog_form" || $form_id == "node_blog_edit_form" || $form_id == "node_case_studies_form"
    || $form_id == "node_case_studies_edit_form" || $form_id == "node_courses_form" || $form_id == "node_courses_edit_form" || $form_id == "node_event_form"
    || $form_id == "node_event_edit_form" || $form_id == "node_guidance_form" || $form_id == "node_guidance_edit_form" || $form_id == "node_jobs_form" || $form_id == "node_jobs_edit_form"
    || $form_id == "node_multimedia_form" || $form_id == "node_multimedia_edit_form" || $form_id == "node_news_form" || $form_id == "node_news_edit_form"
    || $form_id == "node_research_form" || $form_id == "node_research_edit_form" || $form_id == "node_tools_and_platforms_form" || $form_id == "node_tools_and_platforms_edit_form"  || $form_id == "node_platforms_form" || $form_id == "node_platforms_edit_form"
    || $form_id == "node_webinars_form" || $form_id == "node_webinars_edit_form") {
      $form['field_sme_operations_support_cen']['#access'] = false;
      $form['field_related_igo_regions']['#access'] = false;
      $form['field_related_igo_languages']['#access'] = false;
      $form['field_igo_company_size']['#access'] = false;
      //$form['field_business_content_sectors']['#access'] = false;
    }
  }
  //Hide field_finanace from GPP and GIP
  if ($current_domain_id == "ggip_domain" || $current_domain_id == "ggkp_domain") {
    if ($form_id == "node_big_e_form" || $form_id == "node_big_e_edit_form" || $form_id == "node_blog_form" || $form_id == "node_blog_edit_form"
    || $form_id == "node_case_studies_form" || $form_id == "node_case_studies_edit_form" || $form_id == "node_event_form" || $form_id == "node_event_edit_form"
    || $form_id == "node_national_documents_form" || $form_id == "node_national_documents_edit_form" || $form_id == "node_organization_form"
    || $form_id == "node_organization_edit_form" || $form_id == "node_person_form" || $form_id == "node_person_edit_form" || $form_id == "node_policies_and_regulations_form"
    || $form_id == "node_policies_and_regulations_edit_form" || $form_id == "node_research_form" || $form_id == "node_research_edit_form" ||
    $form_id == "node_webinars_form" || $form_id == "node_webinars_edit_form") {
	  //$form['field_finance']['#access'] = false;
    }
  }

  // Set the year range for the Date field.
  if ($form_id == "node_guidance_form" || $form_id == "node_guidance_edit_form" || $form_id == "node_case_studies_form" || $form_id == "node_case_studies_edit_form"
    || $form_id == "node_national_documents_form" || $form_id == "node_national_documents_edit_form" || $form_id == "node_research_form" || $form_id == "node_research_edit_form"
    || $form_id == "node_tools_and_platforms_form" || $form_id == "node_tools_and_platforms_edit_form" || $form_id == "node_platforms_form" || $form_id == "node_platforms_edit_form" || $form_id == "node_islands_curated_knowledge_form" || $form_id == "node_islands_curated_knowledge_edit_form" ) {
      $max = date('Y') + 5; // 100 years ago
      $min = date('Y') - 15; // 15 years ago
      $form['field_event_date']['widget'][0]['value']['#date_year_range'] = $max.':'.$min;
  }
  // Set the year range for the Year field.
  if ($form_id == "node_policies_and_regulations_form" || $form_id == "node_policies_and_regulations_edit_form") {
    $max = date('Y') + 5; // 100 years ago
    $min = date('Y') - 30; // 15 years ago
    for ($i = $min; $i <= $max; $i++) {
      $years[$i] = $i;
    }
    $form['field_published_year']['widget'][0]['value']['#options'] = $years;
  }

  // Custom Submit handler to validate the menu count in Initiative 
  if ($form_id == "node_initiatives_form" || $form_id == "node_initiatives_edit_form") {
    $form['#validate'][] = 'initiative_counter';
  }
  // Custom validate function to validate end date.
  if ($form_id == "node_event_form" || $form_id == "node_event_edit_form" || $form_id == "node_jobs_form" || $form_id == "node_jobs_edit_form") {
    $form['#validate'][] = '_form_validation_event_endate_validate';
  }

  // Need to check the requirement
  if ($form_id == "contact_message_publication_suggestions_library_form") {
    $form['#prefix'] = '<div class="sub-title">You can send a message regarding Publication suggestions for the resource library using the contact form below.</div>';
    $subject = \Drupal::request()->query->get('subject');
    $form['subject']['widget'][0]['value']['#default_value'] = $subject;
  }

  // Hide date from Date field. User allowed to select only Month and Year
  if ($form_id == "node_research_form" || $form_id == "node_research_edit_form" || $form_id == "node_case_studies_form" || $form_id == "node_case_studies_edit_form"
  || $form_id == "node_guidance_form" || $form_id == "node_guidance_edit_form" || $form_id == "node_multimedia_form" || $form_id == "node_multimedia_edit_form" || $form_id == "node_national_documents_form" ||
  $form_id == "node_national_documents_edit_form" || $form_id == "node_tools_and_platforms_form" || $form_id == "node_tools_and_platforms_edit_form" || $form_id == "node_platforms_form" || $form_id == "node_platforms_edit_form"
  || $form_id == "node_islands_curated_knowledge_form" || $form_id == "node_islands_curated_knowledge_edit_form" || $form_id == "node_country_profile_edit_form" || $form_id == "node_country_profile_form") {
	  $form['field_event_date']['widget'][0]['value']['#date_part_order'] = ['month', 'year'];
  }
/* Removed the link from title in the message when form is submitted*/
  if ($form_id == "taxonomy_term_blog_type_form" || $form_id == "taxonomy_term_contact_form_category_form" || $form_id == "taxonomy_term_document_type_form" || $form_id == "taxonomy_term_event_type_form"
  || $form_id == "taxonomy_term_government_entity_form" || $form_id == "taxonomy_term_indicator_category_form" || $form_id == "taxonomy_term_indicators_form" || $form_id == "taxonomy_term_institution_form"
  || $form_id == "taxonomy_term_language_form" || $form_id == "taxonomy_term_news_type_form" || $form_id == "taxonomy_term_organisation_form" || $form_id == "taxonomy_term_organization_type_form"
  || $form_id == "taxonomy_term_other_sectors_form" || $form_id == "taxonomy_term_other_themes_form" || $form_id == "taxonomy_term_publisher_form" || $form_id == "taxonomy_term_resource_type_form"
  || $form_id == "taxonomy_term_sustainable_finance_instrument_form" || $form_id == "taxonomy_term_tags_form" || $form_id == "taxonomy_term_finance_form" || $form_id == "taxonomy_term_sme_operations_support_centre_form") {
    $current_path = \Drupal::service('path.current')->getPath();
    $path = explode("/",$current_path);
    if ($path['1']=='taxonomy' && $path['2']=='term' && $path['4']=='edit') {
	    $form['actions']['submit']['#submit'][] = '_hide_message_taxonomy_form_edit';
    }
    if ($path['3']=='taxonomy' && $path['4']=='manage' && $path['6']=='add') {
      $form['actions']['submit']['#submit'][] = '_hide_message_taxonomy_form_add';
    }
  }
  /* Organisation and title field */
  if ($form_id == "node_guidance_form" || $form_id == "node_guidance_edit_form" || $form_id == "node_courses_form" || $form_id == "node_courses_edit_form"
  || $form_id == "node_national_documents_form" || $form_id == "node_national_documents_edit_form" || $form_id == "node_academic_programme_form" || $form_id == "node_academic_programme_edit_form"
  || $form_id == "node_case_studies_form" || $form_id == "node_case_studies_edit_form" || $form_id == "node_financial_solutions_form" || $form_id == "node_financial_solutions_edit_form"
  || $form_id == "node_multimedia_form" || $form_id == "node_multimedia_edit_form"|| $form_id == "node_research_form" || $form_id == "node_research_edit_form" || $form_id == "node_technical_assistant_form"
  || $form_id == "node_technical_assistant_edit_form" || $form_id == "node_tools_and_platforms_form" || $form_id == "node_tools_and_platforms_edit_form" || $form_id == "node_platforms_form" || $form_id == "node_platforms_edit_form" || $form_id == "node_webinars_form"
  || $form_id == "node_webinars_edit_form" || $form_id == "node_news_form" || $form_id == "node_news_edit_form" || $form_id == "node_jobs_form" || $form_id == "node_jobs_edit_form"
  || $form_id == "node_event_form" || $form_id == "node_event_edit_form" || $form_id == "node_big_e_form" || $form_id == "node_big_e_edit_form" || $form_id == "node_project_form"
  || $form_id == "node_project_form" || $form_id == "node_project_edit_form" || $form_id == "node_islands_curated_knowledge_form" || $form_id == "node_islands_curated_knowledge_edit_form"
  || $form_id == 'node_upload_data_form' || $form_id == 'node_upload_data_edit_form') {
    if (in_array('external_content_creator', $roles)) {
      if ($form_id == "node_upload_data_form" || $form_id == "node_upload_data_edit_form") {
          $form['field_organization_2']['#suffix'] = '<div class="btn-org-list"><span class="refresh_button">Refresh</span></div>';
      }
    }
    else {
        $form['field_organization_2']['#suffix'] = '<div class="btn-org-list"><span class=""refresh_button>Refresh</span><a href="/manage-organisation" target="_blank">Add/Edit Organisation name</a></div>';
    }
    $form['field_organization_2']['widget'][0]['value']['#attributes']['readonly'] = 'readonly';
    $form['#validate'][] = '_form_validate_organisation_translated_data';
  }

  // Hide field Search Hidden 1 in the content type Initiative page
  if ($form_id == "node_intitiative_pages_form" || $form_id == "node_intitiative_pages_edit_form") {
    $form['field_search_hidden_1']['#access'] = false;
  }
  // Get all content types
  $entityTypeManager = \Drupal::service('entity_type.manager');
  $contentTypes = $entityTypeManager->getStorage('node_type')->loadMultiple();
  $node_add_form_ids = [];
  $node_edit_form_ids = [];
  foreach ($contentTypes as $contentType) {
    $node_add_form_ids[] = 'node_'. $contentType->id() .'_form';
  }
  if (in_array($form_id,$node_add_form_ids)) {
    /*
    *
    *  Load Current domain and assign to domain source default value.
    *
    **/
    $loader = \Drupal::service('domain.negotiator');
    $current_domain = $loader->getActiveDomain();
    $current_domain_id = $current_domain->id();
    if (isset($form['field_domain_source'])) {
      $form['field_domain_source']['widget']['#default_value'][] = $current_domain_id;
    }
  }

  // Custom validate function to check whether the organisation exist or not.
  if ($form_id == "node_organization_form" || $form_id == "node_organization_edit_form") {
    $form['#validate'][] = '_form_validation_organization';
  }

  // List only parent sectors in External User Form
  if($form_id == "node_upload_data_form" || $form_id == "node_upload_data_edit_form") {
    $sectors = $form['field_content_sectors']['widget']['#options'];
    $options = [];
    foreach ($sectors as $key => $sector) {
      $sector_node = Node::load($key);
      $parent_id = $sector_node->field_parent->target_id;
      if ($parent_id == '') {
        $options[$key] = $sector;
      }
    }
    $form['field_content_sectors']['widget']['#options'] = $options;
  }
}

// Custom validate function to translated title field.
function _form_validate_organisation_translated_data(&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  if ($node->getType() == 'guidance' || $node->getType() == 'project' || $node->getType() == 'case_studies' || $node->getType() == 'financial_solutions'
    || $node->getType() == 'multimedia' || $node->getType() == 'research' || $node->getType() == 'technical_assistant' || $node->getType() == 'tools_and_platforms' || $node->getType() == 'platforms'
    || $node->getType() == 'webinars' || $node->getType() == 'courses' || $node->getType() == 'jobs' || $node->getType() == 'news' || $node->getType() == 'event'
    || $node->getType() == 'big_e' || $node->getType() == 'project' || $node->getType() == 'upload_data' || $node->getType() == 'islands_curated_knowledge'
    || $node->getType() == 'academic_programme' || $node->getType() == 'national_documents') {
    $languages = $form_state->getValue('field_language');
  } else {
    $languages = $form_state->getValue('field_language')['target_id'];
  }
  foreach($languages as $key => $language) {
    $selected_language[] = $language['target_id'];
  }
  $organisations = $form_state->getValue('field_organisation');
  if(isset($selected_language)) {
    //if ((count($selected_language) == 1 && !in_array('2046', $selected_language)) || count($selected_language) > 1) {
    if ((count($selected_language) == 1 && !in_array('2046', $selected_language))) {
      if ($form_state->getValue('field_title_2')[0]['value'] == '') {
        $form_state->setErrorByName('field_title_2', t('Please Enter the field - Title (Translated English version, If applicable)'));
      }
    }
  }
}

function _hide_message_taxonomy_form_add(&$form, FormStateInterface $form_state) {
  $term = $form_state->getValue('name');
  $term_name = $term[0]['value'];
  \Drupal::messenger()->deleteAll();
  \Drupal::messenger()->addMessage('Created new term '. $term_name);
}

function _hide_message_taxonomy_form_edit(&$form, FormStateInterface $form_state) {
  $term = $form_state->getValue('name');
  $term_name = $term[0]['value'];
  \Drupal::messenger()->deleteAll();
  \Drupal::messenger()->addMessage('Updated term '. $term_name);
}

/* Function to validate number of menu's selected to shown in initiative page.*/
function initiative_counter(array &$form, FormStateInterface $form_state) {
  $menu_count = 0;
  $form_value = $form_state->getValue('field_content_section');
  foreach($form_value as $values) {
    if (isset($values['subform'])) {
      if ($values['subform']['field_show_as_menu_tab']['value'] == '1') {
        $menu_count = $menu_count+1;
      }
    }
  }
  if ($form_state->getValue('field_show_blogs_tab')['value'] == '1') {
    $menu_count = $menu_count+1;
  }  
  if ($form_state->getValue('field_show_events_tab')['value'] == '1') {
    $menu_count = $menu_count+1;
  }
  if ($form_state->getValue('field_show_leaders_tab')['value'] == '1') {
    $menu_count = $menu_count+1;
  }
  if ($form_state->getValue('field_show_partners_tab')['value'] == '1') {
    $menu_count = $menu_count+1;
  }
  if ($form_state->getValue('field_show_resource_tab')['value'] == '1') {
    $menu_count = $menu_count+1;
  }
  if ($menu_count > 7) {
    $form_state->setErrorByName('field_show_activities_tab', t('You are allowed to show a maximum of 7 tabs'));
  }
}


/**
 * Implements hook_views_query_alter().
 */
function ggkp_custom_views_query_alter(ViewExecutable $view, QueryPluginBase $query) { 

  // Query alter to list events on clicking date in Regional events calendar in GEF Islands
  if ($view->id() == 'events' && $view->current_display == 'block_5') {

    $dates=$view->args[0];
    $value = str_replace('-', '', $dates);

    $definition = array(
      'table' => 'node__field_event_end_date',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
      'extra' => [ // These are extra conditions views adds by default, I just copied them so it looks like any filter.
          0 => [
              'field' => 'deleted',
              'value' => 0
          ],
          1 => [
              'left_field' => 'langcode',
              'field' => 'langcode'
          ]
      ]
    );
    $join = Views::pluginManager('join')->createInstance('standard', $definition);
    $query->addRelationship('node__field_event_end_date', $join, 'node_field_data');

    $date_format1 = $query->getDateFormat("node__field_event_date.field_event_date_value", 'Ymd')." <= :value";
    $date_format2 = $query->getDateFormat("node__field_event_end_date.field_event_end_date_value", 'Ymd')." >= :value";
    $query->addWhereExpression(0, $date_format1 . " AND " . $date_format2, [":value" => $value, ":value" => $value]);

    $query->setWhereGroup('OR', 0);
    $date_format = $query->getDateFormat("node__field_event_date.field_event_date_value", 'Ymd')." = :value1";
    $query->addWhereExpression(0, $date_format . " AND " . 'node__field_event_end_date.field_event_end_date_value IS NULL', [":value1" => $value, ":value" => '']);
  }

  // Query alter to list events in event calendar page in GPP, GIP, SPARC
  if ($view->id() == 'events' && $view->current_display == 'block_3') { 
    unset($query->where[0]);
    $nid = $view->argument['field_event_date_value']->argument;
    $current_path = \Drupal::service('path.current')->getPath();
    $url = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
    $args = explode('/', $current_path);

    if (isset($args[3]) && $args[3] != '') {
      $definition = array(
        'table' => 'node__field_event_end_date',
        'field' => 'entity_id',
        'left_table' => 'node_field_data',
        'left_field' => 'nid',
        'extra' => [ // These are extra conditions views adds by default, I just copied them so it looks like any filter.
            0 =>[
                'field' => 'deleted',
                'value' => 0
            ],
            1 => [
                'left_field' => 'langcode',
                'field' => 'langcode'
            ]
        ]
      );
      $join = Views::pluginManager('join')->createInstance('standard', $definition);

      $query->addRelationship('node__field_event_end_date', $join, 'node_field_data');
	    $value = str_replace('-', '', $args[3]);
      
      $date_format1 = $query->getDateFormat("node__field_event_date.field_event_date_value", 'Ymd')." <= :value";
      $date_format2 = $query->getDateFormat("node__field_event_end_date.field_event_end_date_value", 'Ymd')." >= :value";
      $query->addWhereExpression(0, $date_format1 . " AND " . $date_format2, [":value" => $value, ":value" => $value]);

      $query->setWhereGroup('OR', 0);
      $date_format = $query->getDateFormat("node__field_event_date.field_event_date_value", 'Ymd')." = :value1";
      $query->addWhereExpression(0, $date_format . " AND " . 'node__field_event_end_date.field_event_end_date_value IS NULL', [":value1" => $value, ":value" => '']);
	  }
    elseif (isset($args[2]) && $args[2] != '') {

      $definition = array(
        'table' => 'node__field_event_end_date',
        'field' => 'entity_id',
        'left_table' => 'node_field_data',
        'left_field' => 'nid',
        'extra' => [ // These are extra conditions views adds by default, I just copied them so it looks like any filter.
            0 =>[
                'field' => 'deleted',
                'value' => 0
            ],
            1 => [
                'left_field' => 'langcode',
                'field' => 'langcode'
            ]
        ]
      );
      $join = Views::pluginManager('join')->createInstance('standard', $definition);
      $query->addRelationship('node__field_event_end_date', $join, 'node_field_data');

      $date_format1 = $query->getDateFormat("node__field_event_date.field_event_date_value", 'Ym')." <= :value";
      $date_format2 = $query->getDateFormat("node__field_event_end_date.field_event_end_date_value", 'Ym')." >= :value";
      $query->addWhereExpression(0, $date_format1 . " AND " . $date_format2, [":value" => $args[2], ":value" => $args[2]]);

      $query->setWhereGroup('OR', 0);
      $date_format = $query->getDateFormat("node__field_event_date.field_event_date_value", 'Ym')." = :value1";
      $query->addWhereExpression(0, $date_format . " AND " . 'node__field_event_end_date.field_event_end_date_value IS NULL', [":value1" => $args[2], ":value" => '']);
    }
    else {
      $current_date = date('Ym');
      $date_format = $query->getDateFormat("node__field_event_date.field_event_date_value", 'Ym')." = :value";
      $query->addWhereExpression(0, $date_format, [":value" => $current_date]);
    }
  }

  // Query to list events based on the date selected in Event listing page.
  if ($view->id() == 'events' && $view->current_display == 'page_1') {
    $date = \Drupal::request()->query->get('date');
    if ($date != '') {
      $definition = array(
        'table' => 'node__field_event_date',
        'field' => 'entity_id',
        'left_table' => 'node_field_data',
        'left_field' => 'nid',
        'extra' => [ // These are extra conditions views adds by default, I just copied them so it looks like any filter.
            0 =>[
                'field' => 'deleted',
                'value' => 0
            ],
            1 => [
                'left_field' => 'langcode',
            'field' => 'langcode'
            ]
        ]
      );
      $date_format = $query->getDateFormat("node__field_event_date.field_event_date_value", 'Ym')." = :value";
      $query->addWhereExpression(1, $date_format, [":value" => $date]);
    }
  }

  // Query to list events based on the date selected in Past Event listing page.
  if ($view->id() == 'events' && $view->current_display == 'page_2') {
    $date = \Drupal::request()->query->get('date');
    if ($date != '') {
      $date_format = $query->getDateFormat("node__field_event_date.field_event_date_value", 'Ym')." = :value";
      $query->addWhereExpression(1, $date_format, [":value" => $date]);
    }
  }

  // Get region id for "Regional publications" section in Country detail page in contextual filter
  if ($view->id() == "countries" && $view->current_display == "block_6") {
    global $base_url;
	  unset($query->where[0]['conditions'][1]);
    $current_path = \Drupal::service('path.current')->getPath();
    $args = explode('/', $current_path);
    if (isset($args[2]) && $args[2] != '' && is_numeric($args[2])) {
      $nid = $args[2];
      $node = Node::load($nid);
      $region = $node->get('field_regions')->target_id;
	    $query->addWhere('0', 'node__field_regions.field_regions_target_id', $region, "=");
    }
    else {
      // Need to remove
      $response = new RedirectResponse($base_url);
      if (isset($response)) {
        $response->send();
        exit(0);
      }
    }
  }

  // To list organization in alphabetical order
  if ($view->id() == "partners" && $view->current_display == "page_1") {
    unset($query->orderby);
    // add order by the prefix
    $formula = "CAST(SUBSTR(node_field_data.title,1,2) AS SIGNED)";
    $query->addField(NULL, $formula, 'prefix');
    $query->addOrderBy(NULL, NULL, 'ASC', 'prefix');
    $query->addOrderBy(NULL,'node_field_data.title', 'ASC');
  }
}

/**
 * Implements hook_views_pre_view()
 */
function ggkp_custom_views_pre_view($view, $display_id, $args) {

  // Get the initiative id from the url and set the contextal filter to load the content for initiatives menu pages.
  if ($view->id() == 'initiatives_image' && $view->current_display == 'block_1' || $view->id() == 'initiative_details_page' && $view->current_display == 'page_1'
  || $view->id() == 'initiative_details_page' && $view->current_display == 'page_2' || $view->id() == 'initiative_blogs_news' && $view->current_display == 'page_1'
  || $view->id() == 'initiative_contact_us' && $view->current_display == 'page_1' || $view->id() == 'initiative_events' && $view->current_display == 'page_1'
  || $view->id() == 'initiative_leaders' && $view->current_display == 'page_1' || $view->id() == 'initiative_partners' && $view->current_display == 'page_1'
  || $view->id() == 'initiative_knowledge' && $view->current_display == 'page_1' || $view->id() == 'initiative_menu_page' && $view->current_display == 'page_1'
  || $view->id() == 'initiative_knowledge' && $view->current_display == 'page_2' || $view->id() == 'gef_initiative_news' && $view->current_display == 'page_1') {

    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name == "entity.taxonomy_term.canonical") {
      $current_path = \Drupal::service('path.current')->getPath();
      $path = explode("/", $current_path);
      $term = Term::load($path[3]);
      $vocabularyId = $term->bundle();
      if ($vocabularyId == 'regional_programmes') {
        $node_id = 84317;
        $view->args[0] = 84317;
      }
    }
    else {
      $current_path = \Drupal::service('path.current')->getPath();
      $path = explode("/",$current_path);

      if (is_numeric($path[2])) {
        $view->args[0] = $path[2];
      }
      else {
        $alias = substr($current_path, 0, strrpos($current_path, '/'));
        $params = Url::fromUri("internal:" . $alias)->getRouteParameters();
        $entity_type = key($params);
        $node = \Drupal::entityTypeManager()->getStorage($entity_type)->load($params[$entity_type]);
        $view->args[0] = $node->nid->value;
      }
    }
  }
  // GGKP main site - greengrowthknowledge.org - Add {content} link in all dashboard is replaced with the hyperlink to GPP login page. ie onclick the add link in the 
  // dashboard pages user will be redirected to GPP login page
  if (($view->id() == 'manage_dashboard' && $view->current_display == 'page_6') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_15')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_3') || ($view->id() == 'hero' && $view->current_display == 'page_11')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_1') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_8')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_18') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_11')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_7') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_13')
    || ($view->id() == 'hero' && $view->current_display == 'page_4') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_10')
    || ($view->id() == 'hero' && $view->current_display == 'page_12') || ($view->id() == 'hero' && $view->current_display == 'page_2')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_12') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_26')
    || ($view->id() == 'hero' && $view->current_display == 'page_3') || ($view->id() == 'hero' && $view->current_display == 'page_13')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_19') || ($view->id() == 'hero' && $view->current_display == 'page_1')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_16') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_9')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_17') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_20')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_22') || ($view->id() == 'manage_external_user_dashboard' && $view->current_display == 'page_2')
    || ($view->id() == 'manage_external_user_dashboard' && $view->current_display == 'page_3') || ($view->id() == 'hero' && $view->current_display == 'page_5')
    || ($view->id() == 'hero' && $view->current_display == 'page_8') || ($view->id() == 'hero' && $view->current_display == 'page_9')) {
      
    $headerHandler = $view->getHandler($view->current_display, 'header', 'area');
    if (!is_null($headerHandler) && isset($headerHandler['content']['value'])) {
      $header = $headerHandler['content']['value'];
      if(!empty($header)) {
        $doc = new \DOMDocument();
        @$doc->loadHTML($header);
        $links = $doc->getElementsByTagName('a');
        foreach($links as $link) {
          $href = $link->getAttribute('href');
        
          $loader = \Drupal::service('domain.negotiator');
          $current_domain = $loader->getActiveDomain();
          $current_domain_id = $current_domain->id();
          
          if($current_domain_id == 'ggkp_main_domain') {
              $domain = \Drupal::entityTypeManager()->getStorage('domain')->load('ggkp_domain');
              
              $protocol = isset($_SERVER["HTTPS"]) ? 'https' : 'http';
              $url = parse_url($domain->getPath());
              if ($url['scheme'] == $protocol) {
                $domain_url = $domain->getPath();
              }
              else {
                $domain_url = str_replace($url['scheme'], $protocol, $domain->getPath());
              }
              $new_header = str_replace($href,  $domain_url . 'user/login', $header);
              $new_header = str_replace('<a', '<a target="_blank"', $new_header);
              $options = array(
                'id' => 'area',
                'table' => 'views',
                'field' => 'area',
                'relationship' => 'none',
                'group_type' => 'none',
                'admin_label' => '',
                'empty' => NULL,
                'tokenize' => NULL,
                'content' => array(
                  'value' => $new_header,
                  'format' => "full_html",
                ),
                'plugin_id' => 'text',
              );
              $view->setHandler($view->current_display, 'header', 'area', $options);
          }
        }
      }
    }
  }
}



/*
 * Implements hook_preprocess_block().
 */

function ggkp_custom_preprocess_block(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $url = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $args = explode('/', $current_path);

  // Changing page title in SME Detail Page
  if ($variables['plugin_id'] == 'page_title_block') {
    if ($args[1] == 'sme-operations-support-centre' && $args[2] == 'browse') {
      $voc = 'sme_operations_support_centre';
      if ($voc == 'sme_operations_support_centre') {
        $new_title = 'Browse' . ' ' . 'SME Support Centre';
        $variables['content']['#title'] = $new_title;
      }
    }
  }
  // Show the translated title version in GPP resource pages
  if (isset($variables['elements']['#id']) && $variables['elements']['#id'] == 'pagetitle') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node && ($node->getType() == 'academic_programme' || $node->getType() == 'courses' || $node->getType() == 'guidance'
      || $node->getType() == 'national_documents' || $node->getType() == 'project' || $node->getType() == 'case_studies'
      || $node->getType() == 'financial_solutions' || $node->getType() == 'multimedia' || $node->getType() == 'research'
      || $node->getType() == 'technical_assistant' || $node->getType() == 'tools_and_platforms' || $node->getType() == 'platforms' || $node->getType() == 'webinars'
      || $node->getType() == 'courses' || $node->getType() == 'jobs' || $node->getType() == 'news' || $node->getType() == 'event'
      || $node->getType() == 'big_e' || $node->getType() == 'project')) {
      if ($node->get('field_title_2')->value != '') {
        $page_sub_title = $node->get('field_title_2')->value;
        $language = $node->get("field_language")->getValue();
        if ((count($language) == 1 && $language[0]['target_id'] != '2046')) {
          $variables['sub_title'] =  $page_sub_title;
        }
      }
    }
  }
  // Show the translated title version in GIP resource pages
  if (isset($variables['elements']['#id']) && $variables['elements']['#id'] == 'ggip_page_title') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node && ($node->getType() == 'courses' || $node->getType() == 'guidance' || $node->getType() == 'guidance'
      || $node->getType() == 'national_documents' || $node->getType() == 'project' || $node->getType() == 'case_studies'
      || $node->getType() == 'financial_solutions' || $node->getType() == 'multimedia' || $node->getType() == 'research'
      || $node->getType() == 'technical_assistant' || $node->getType() == 'tools_and_platforms' || $node->getType() == 'platforms' || $node->getType() == 'webinars'
      || $node->getType() == 'courses' || $node->getType() == 'jobs' || $node->getType() == 'news' || $node->getType() == 'event'
      || $node->getType() == 'big_e' || $node->getType() == 'project')) {
      if ($node->get('field_title_2')->value != '') {
        $page_sub_title = $node->get('field_title_2')->value;
        $language = $node->get("field_language")->getValue();
        if ((count($language) == 1 && $language[0]['target_id'] != '2046')) {
          $variables['sub_title'] =  $page_sub_title;
        }
      }
    }
  }
  // Show the translated title version in GFP resource pages
  if (isset($variables['elements']['#id']) && $variables['elements']['#id'] == 'ggfp_page_title') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node && ($node->getType() == 'courses' || $node->getType() == 'guidance' || $node->getType() == 'guidance'
      || $node->getType() == 'national_documents' || $node->getType() == 'project' || $node->getType() == 'case_studies'
      || $node->getType() == 'financial_solutions' || $node->getType() == 'multimedia' || $node->getType() == 'research'
      || $node->getType() == 'technical_assistant' || $node->getType() == 'tools_and_platforms' || $node->getType() == 'platforms' || $node->getType() == 'webinars'
      || $node->getType() == 'courses' || $node->getType() == 'jobs' || $node->getType() == 'news' || $node->getType() == 'event'
      || $node->getType() == 'big_e' || $node->getType() == 'project')) {
      if ($node->get('field_title_2')->value != '') {
        $page_sub_title = $node->get('field_title_2')->value;
        $language = $node->get("field_language")->getValue();
        if ((count($language) == 1 && $language[0]['target_id'] != '2046')) {
          $variables['sub_title'] =  $page_sub_title;
        }
      }
    }
  }

  // Set the Title of the each initiatives menu pages
  if (isset($variables['elements']['#id']) &&
    ($variables['elements']['#id'] == 'pagetitle_4' || 
    $variables['elements']['#id'] == 'pagetitle_6' || 
    $variables['elements']['#id'] == 'pagetitle_7')) {
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name == "entity.taxonomy_term.canonical") {
      $current_path = \Drupal::service('path.current')->getPath();
      $path = explode("/", $current_path);
      $term = Term::load($path[3]);
      $vocabularyId = $term->bundle();
      if($vocabularyId == 'regional_programmes') {
        $node_id = 84317;
        $node = \Drupal\node\Entity\Node::load($node_id);
      }
    }
    else {
      $current_path = \Drupal::service('path.current')->getPath();
      $path = explode("/",$current_path);
      if (is_numeric($path[2])) {
        $node = \Drupal\node\Entity\Node::load($path[2]);
      }
      else {
        $alias = substr($current_path, 0, strrpos( $current_path, '/'));
        $path_name = end(explode("/",$current_path));
        $params = Url::fromUri("internal:" . $alias)->getRouteParameters();
        $entity_type = key($params);
        $node = \Drupal::entityTypeManager()->getStorage($entity_type)->load($params[$entity_type]);
      }
    }
    if($node != '') {
      $node_array = $node->toArray();
      $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$node_array['nid']['0']['value']);
      $output = '<ul>';
      if($node_array['field_show_about_tab']['0']['value'] == '1' && $path_name == 'about'){
        $variables['content']['#title'] = $node_array['field_about_tab_title']['0']['value'];
      }
      if($node_array['field_show_regional_pro']['0']['value'] == '1' && $path_name == 'region'){
        $variables['content']['#title'] = $node_array['field_region_l']['0']['value'];
      }
      if($node_array['field_show_activities_tab']['0']['value'] == '1' && $path_name == 'activities'){
        $variables['content']['#title'] = $node_array['field_activities_tab_title']['0']['value'];
      }
      if($node_array['field_show_partners_tab']['0']['value'] == '1' && $path_name == 'partners'){
        $variables['content']['#title'] = $node_array['field_partners_tab_title']['0']['value'];
      }
      if($node_array['field_show_resource_tab']['0']['value'] == '1' && $path_name == 'knowledge'){
        $variables['content']['#title'] = $node_array['field_resource_tab_title']['0']['value'];
      }
      if($node_array['field_show_blogs_tab']['0']['value'] == '1' && $path_name == 'News'){
        $variables['content']['#title'] = $node_array['field_blogs_tab_title']['0']['value'];
      }
      if($node_array['field_show_leaders_tab']['0']['value'] == '1' && $path_name == 'leaders'){
        $variables['content']['#title'] = $node_array['field_leaders_tab_title']['0']['value'];
      }
      if($node_array['field_show_events_tab']['0']['value'] == '1' && $path_name == 'events'){
        $variables['content']['#title'] = $node_array['field_events_tab_title']['0']['value'];
      }
      if($node_array['field_show_contact_us_tab']['0']['value'] == '1' && $path_name == 'contact'){
        $variables['content']['#title'] = $node_array['field_contact_us_tab_title']['0']['value'];
      }
    }
  }
}

function ggkp_custom_block_access(Block $block, $operation, AccountInterface $account) {
  $current_path = \Drupal::service('path.current')->getPath();
  $result = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $path = explode("/",$result);
  if ($operation == 'view') {
    $route_name   = \Drupal::routeMatch()->getRouteName();
    // Show summary field only if includes fulltext search 
    if ($block->id() == 'newssummary' || $block->id() == 'blogsummary' || $block->id() == 'researchsummary' || $block->id() == 'researchsummary_3'
    || $block->id() == 'researchsummary_2' || $block->id() == 'blogsummary_2' || $block->id() == 'blogsummary_3' || $block->id() == 'newssummary_2'
    || $block->id() == 'newssummary_3' || $block->id() == 'casestudiessummary' || $block->id() == 'casestudiessummary_2'
    || $block->id() == 'casestudiessummary_3' || $block->id() == 'expertsummary' || $block->id() == 'projectsummary' || $block->id() == 'browsefinancesummary'
    || $block->id() == 'jobsummary' || $block->id() == 'jobsummary_2'
    || $block->id() == 'jobsummary_3' || $block->id() == 'nationaldocumentsummary') {
      if ($current_path == '/news' || $current_path == '/news/browse' || $current_path == '/blog' || $current_path == '/resources' || $current_path == '/resources/browse' || $current_path == '/case-studies' || $current_path == '/national-documents'
      || $current_path == '/expert-connect' || $current_path == '/projects/browse' || $current_path == '/financial-measures/browse'
      || $current_path == '/jobs-list' || $current_path == '/case-studies/browse' || $route_name == 'entity.node.canonical') {
        $search_api_fulltext = \Drupal::request()->query->get('search_api_views_fulltext');
        if (!isset($search_api_fulltext)) {
          return AccessResult::forbiddenif (true)->addCacheableDependency($block);
        }
      }
    }
    // Not sure about the requirement
    if ($block->id() == 'resource_button_block') {
      if ((strpos($current_path, "/case-studies/browse") !== FALSE)) {
        return AccessResult::forbiddenif (true)->addCacheableDependency($block);
      }
    }

    // We can remove this code
    if ($block->id() == 'views_block__regional_programme_pages_block_1' || $block->id() == 'views_block__regional_programme_pages_block_1_2') {
      if ($route_name =='entity.taxonomy_term.edit_form') {
        return AccessResult::forbiddenif (true)->addCacheableDependency($block);
      }
    }
    // Remove block from gef-initiative knowledge page.
    if ($block->id() == 'contenttype' || $block->id() == 'theme_30' || $block->id() == 'countries_19' || $block->id() == 'organisation_25' || $block->id() == 'regions_16'
    || $block->id() == 'contenttype_34' || $block->id() == 'theme_46' || $block->id() == 'countries_28' || $block->id() == 'organisation_32' || $block->id() == 'regions_19') {
      if ($route_name =='view.initiative_knowledge.page_2') {
        return AccessResult::forbiddenif (true)->addCacheableDependency($block);
      }
    }

    $request = \Drupal::request();
    $referer = $request->headers->get('referer');
    $session = $request->getSession();
    // Getting the base url.
    $base_url = Request::createFromGlobals()->getSchemeAndHttpHost();

    // Getting the alias or the relative path.
    if ($referer !== null) {
      $alias = substr($referer, strlen($base_url));
      $path = explode('/', $alias);
    }
    // Show the corresponding facet blocks, when user reach resource detail page from sme or global search page
   if(isset($path)) {
      if(isset($path[1]) && $path[1] == 'sme-operations-support-centre') {
      if ($block->id() == 'contenttype_5' || $block->id() == 'smeoperationssupportcentretaxonomytermtermparents_9' || $block->id() == 'businesssectors_5'
      || $block->id() == 'country_13' || $block->id() == 'region_12' || $block->id() == 'theme_20' || $block->id() == 'organisation_18' || $block->id() == 'deliverymode_3'
      || $block->id() == 'smeoperationssupportcentretaxonomytermtermparents_4' || $block->id() == 'businesssectors' || $block->id() == 'countries_6' || $block->id() == 'regions_5' || $block->id() == 'theme_34'
      || $block->id() == 'organisation_5' || $block->id() == 'contenttype_28' || $block->id() == 'contenttype_25' || $block->id() == 'smeoperationssupportcentretaxonomytermtermparents_5' || $block->id() == 'businesssectors_9'
      || $block->id() == 'countries_10' || $block->id() == 'regions_10' || $block->id() == 'theme_3' || $block->id() == 'organisation_9' || $block->id() == 'contenttype_31'
      || $block->id() == 'smeoperationssupportcentretaxonomytermtermparents_6' || $block->id() == 'businesssectors_2' || $block->id() == 'regions_12' || $block->id() == 'theme_6' || $block->id() == 'organisation_12'
      || $block->id() == 'countries_12' || $block->id() == 'smeoperationssupportcentretaxonomytermtermparents_13' || $block->id() == 'businesssectors_4' || $block->id() == 'country' || $block->id() == 'region_23'
      || $block->id() == 'theme_35' || $block->id() == 'organisation_27' || $block->id() == 'contenttype_32' || $block->id() == 'platformscontenttype_3' || $block->id() == 'platformssmeoperationssupportcentretaxonomytermtermparents'
      || $block->id() == 'platformsbusinesssectors' || $block->id() == 'platformscountries_3' || $block->id() == 'platformsregions_3' || $block->id() == 'platformstheme_3' || $block->id() == 'platformsorganisation_3'
      || $block->id() == 'contenttype_33' || $block->id() == 'smeoperationssupportcentretaxonomytermtermparents_14' || $block->id() == 'businesssectors_8' || $block->id() == 'countries_27' || $block->id() == 'regions_18'
      || $block->id() == 'theme_45' || $block->id() == 'organisation_31' || $block->id() == 'exposedformbrowse_case_studiespage_3_3') {
        //dsm($referer);  dsm($route_name);
        if ($route_name == "entity.node.canonical") {

              return AccessResult::forbiddenif (true)->addCacheableDependency($block);
        }
      }
    }
    else {
      if ($block->id() == 'type' || $block->id() == 'businesssector' || $block->id() == 'country_18' || $block->id() == 'regions_17' || $block->id() == 'organisation_26'
      || $block->id() == 'smeoperationssupportcentre' || $block->id() == 'filterby') {
        if ($route_name == "entity.node.canonical" || $route_name == "view.browse_course.page_1" || $route_name == "view.browse_financial_solutions.page_1"
        || $route_name == "view.browse_tools_and_platforms.page_1" || $route_name == "view.browse_tools_and_platforms.page_2" || $route_name == "view.browse_technical_assistant.page_1"
        || $route_name == "view.browse_guidance.page_1" || $route_name == "view.browse_case_studies.page_1") {
          return AccessResult::forbiddenif (true)->addCacheableDependency($block);
        }
      }
    }

    // Show back to initiative button when user reaches the resource detail page from initiatives listing page.
    if(isset($path[1]) && $path[1] != 'initiatives') {
      if ($block->id() == 'backtoinitiativebuttonblock' || $block->id() == 'backtoinitiativebuttonblock_2' || $block->id() == 'backtoinitiativebuttonblock_3') {
        return AccessResult::forbiddenif (true)->addCacheableDependency($block);
      }

    }


   }

  }
}

// Custom function to validate end date
function _form_validation_event_endate_validate(&$form, FormStateInterface $form_state) {
    $field_show_end_date = $form_state->getValue('field_show_end_date')['value'];
    if($field_show_end_date == 1) {
      $start_date =  $form_state->getValue('field_event_date')[0]['value'];
      $end_date =  $form_state->getValue('field_event_end_date')[0]['value'];
      $startDate = new DrupalDateTime($start_date, date_default_timezone_get());
      $endDate = new DrupalDateTime($end_date, date_default_timezone_get());
      $start_date = $startDate->format("Y-m-d H:i:s");
      $start_date = strtotime($start_date);
      $end_date = $endDate->format("Y-m-d H:i:s");
      $end_date = strtotime($end_date);
      if ($end_date < $start_date) {
        $form_state->setErrorByName('field_event_end_date', t('The Event End Date must be greater than or equal to the Start Date.'));
      }
    }
}

// Custom validate function to check whether the organisation is laready exist.
function _form_validation_organization(&$form, FormStateInterface $form_state){
   $organisation_value = $form_state->getValue('title')[0]['value'];
   $cnid = $form_state->getformObject()->getEntity()->id();
   $entity_type = 'node';
   $query = \Drupal::entityTypeManager()->getStorage($entity_type)->getQuery();
  $query->condition('title', $organisation_value);
  $query->condition('type', 'organization'); 
  if ($form_state->getFormObject()->getOperation() == 'edit') {
    $query->condition('nid', $cnid, '<>'); 
  }
  $nids = $query->execute();
  if (!(empty($nids))){
   $form_state->setErrorByName('title', t('Organization name already exists.'));	
   }
}
function ggkp_custom_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {

  // To set the field_event_date with update date to make use in views.
  if ($entity->bundle() == "page" || $entity->bundle() == "big_e" || $entity->bundle() == "business_sector" ||
  $entity->bundle() == "country" || $entity->bundle() == "hero_feature" || $entity->bundle() == "indicators" ||
  $entity->bundle() == "initiatives" || $entity->bundle() == "organization" || $entity->bundle() == "person" ||
  $entity->bundle() == "policies_and_regulations" || $entity->bundle() == "project" || $entity->bundle() == "sector" ||
  $entity->bundle() == "theme" || $entity->bundle() == "working_groups") {
	  if (!$entity->isNew()) {
		  $update_date = $entity->changed->value;
		  $entity->field_event_date->value = $update_date;
	  }
  }

  /* if Organisation name taxonomy added then it should insert into Publisher taxonomy from Taxonomy dashboard */
  if ($entity->bundle() == 'organisation') {
    $org_name = $entity->name->value;
	if (isset($org_name) && $org_name != '') {
	  $vocabulary = 'publisher';
	  if ($terms = taxonomy_term_load_multiple_by_name($org_name, $vocabulary)) {
        	$term = reset($terms);
      }
      else {
        $term = Term::create([
	      'name' => $org_name,
	      'vid' => $vocabulary,
        ]);
       $term->save();
	  }
    }
  }

  // while adding/editing organization node, check for taxonomy term with same name, if exist update the node or if not exist create new term with
  // organization name and its id.
  if ($entity->bundle() == 'organization') {
    $organisation_value = $entity->get('title')->value;
    $content_id = $entity->id();
    $query = \Drupal::entityQuery('taxonomy_term');
    $query->condition('vid', 'organisation')
    ->condition('field_organization_node', $content_id);
    $tids = $query->execute();
    dsm($tids);
    if (isset($tids) && count($tids) > 0) {
      $term = Term::load(key($tids));
      $term->name->setValue($organisation_value);
      $term->save();
    }
    else {
      $terms = taxonomy_term_load_multiple_by_name(trim($organisation_value), 'organisation');
      $term = reset($terms);
      if (empty($term)) {
        
        $new_term = \Drupal\taxonomy\Entity\Term::create([
          'vid' => 'organisation',
          'name' => trim($organisation_value),
          'field_organization_node' => $content_id, 
        ]);
        $new_term->save();
      
      }
      else {
        $content_id = $entity->id();
        $term->field_organization_node->setValue($content_id);
        $term->save();
      }
    }
  }

  // Save all paragraph values to new search field that is indexed in search api to show the result in global search in main site.
    if ($entity->bundle() == "intitiative_pages") {
    $title = $entity->get('title')->getValue();
    //dsm($title);
    $search_one = $title['0']['value']." ";
    $carousel_items = $entity->get('field_carousel')->getValue();
    foreach($carousel_items as $carousel_item){
      if(isset($carousel_item['subform']['field_title']['0']['value'])){
        $search_one .= $carousel_item['subform']['field_title']['0']['value']." ";
      }
      if(isset($carousel_item['subform']['field_short_description']['0']['value'])){
        $search_one .= $carousel_item['subform']['field_short_description']['0']['value']." ";
      }
      if(isset($carousel_item['subform']['field_links'])){
        foreach($carousel_item['subform']['field_links'] as $links){
          if(isset($links['uri'])){
            $search_one .= $links['uri']." ";
          }
          if(isset($links['title'])){
            $search_one .= $links['title']." ";
          }
        }
      }
    }
    $widgets = $entity->get('field_multiple_widget')->getValue();
    foreach($widgets as $widget){
      if(isset($widget['subform']['field_title']['0']['value'])){
        $search_one .= $widget['subform']['field_title']['0']['value']." ";
      }
      if(isset($widget['subform']['field_description']['0']['value'])){
        $search_one .= $widget['subform']['field_description']['0']['value']." ";
      }
      if(isset($widget['subform']['field_left_content']['0']['value'])){
        $search_one .= $widget['subform']['field_left_content']['0']['value']." ";
      }
      if(isset($widget['subform']['field_right_content']['0']['value'])){
        $search_one .= $widget['subform']['field_right_content']['0']['value']." ";
      }
      $teams = $widget['subform']['field_select_team'];
      foreach($teams as $team) {
        $id = $team['target_id'];
        $node = \Drupal::entityTypeManager()->getStorage('node')->load($id);
        if(isset($node)) {
          $title = $node->getTitle();
          $email = $node->field_email->value;
          $search_one .= '</br>'. $title .'</br>'.$email.'</br>';
          $orgs = $node->get('field_title_')->referencedEntities();
          foreach ($orgs as $org) {
            $job_title = $org->field_title->value;
            $organisation = $org->field_organization->referencedEntities()[0]->name->value;
            $search_one .= $job_title .'</br>'.$organisation.'</br>';
          }
        }
      }
      if (isset($widget['subform']['field_select_new_team'])) {
        $teams = $widget['subform']['field_select_new_team'];
      }
      foreach($teams as $team) {
        $id = $team['target_id'];
        $node = \Drupal::entityTypeManager()->getStorage('node')->load($id);
        if(isset($node)) {
          $title = $node->getTitle();
          $email = $node->field_email->value;
          $show_email = $widget['subform']['field_show_email']['value'];
          if($show_email) {
            $search_one .= '</br>'. $title .'</br>'.$email.'</br>';
          }
          else {
            $search_one .= '</br>'. $title .'</br>';
          }
          $orgs = $node->get('field_title_')->referencedEntities();
          foreach ($orgs as $org) {
            $job_title = $org->field_title->value;
            $show_org = $widget['subform']['field_show_organization']['value'];
            $organisation = $org->field_organization->referencedEntities()[0]->name->value;
            if($show_org) {
              $search_one .= $job_title .'</br>'.$organisation.'</br>';
            }
            else {
              $search_one .= $job_title .'</br>';
            }

          }
        }
      }
      $search1  = array(
        'value' => $search_one,
        'summary' => $data['summary'],
        'format' => 'full_html',
      );
    }
    $entity->set( 'field_search_hidden_1', $search1);
  }

  // Save team members automatically to new team widgets in initiatives.
  if ($entity->bundle() == "initiatives") {
   
    $teams_from_page = $entity->get('field_leaders')->getValue();
    if(!empty($teams_from_page)) {
      $widgets = $entity->get('field_multiple_widget')->getValue();
      foreach($widgets as $widget) {
        if(isset($widget['subform']['field_select_team'])) { 
          if($widget['subform']['field_add_team_members']['value'] == 0) {
            
            $paragraph_team = Paragraph::load($widget['target_id']);
            $paragraph_field_value = $paragraph_team->get('field_select_team')->getValue();
            // Do something with the $paragraph_field_value
            // Update the field.
            $paragraph_team->set('field_select_team', $teams_from_page);
            // Save the Paragraph.
            $paragraph_team->save();
          }
        }

      }
      $widgets = $entity->get('field_content_section')->getValue();
      foreach($widgets as $widget) {
        $sub_items = [];
        if (isset($widget['subform'])) {
          $sub_items = $widget['subform']['field_multiple_widget'];
        }
        $i= 0;
        foreach($sub_items as $sub_item){
          if(isset($sub_item['subform']['field_select_team'])) {
            if($sub_item['subform']['field_add_team_members']['value'] == 0) {
              $subQuery = \Drupal::database()->select('paragraph__field_select_team','s');
              $subQuery->fields('s',array('entity_id'));

              $query = \Drupal::database()->select('paragraph__field_multiple_widget', 'm');
              $query->join('paragraphs_item', 't', 't.id = m.field_multiple_widget_target_id');
                        $query->fields('m', ['field_multiple_widget_target_id']);
                        $query->condition('m.entity_id', $widget['target_id'], '=');
                        $query->condition('t.type', 'select_team', '=');
                        $query->condition('m.field_multiple_widget_target_id',$subQuery,'NOT IN');
                        $pid = $query->execute()->fetchField();
              if($pid) {
                $parent_paragraph = Paragraph::load($pid);
                $paragraph_field_value = $parent_paragraph->get('field_select_team')->getValue();
                // Do something with the $paragraph_field_value
                // Update the field.
                $parent_paragraph->set('field_select_team', $teams_from_page);
                // Save the Paragraph.
                $parent_paragraph->save();
              }
            }
          }
          $i++;
        }
      }
    }
  }

}



// To change the label of the image field
function ggkp_custom_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (isset($form["field_resource_image"])) {
    $form["field_resource_image"]["widget"]["open_button"]["#value"] = t('Add image');
  }
  if (isset($form["field_sector_image"])) {
    $form["field_sector_image"]["widget"]["open_button"]["#value"] = t('Add image');
  }
}

function ggkp_custom_form_views_exposed_form_alter(&$form, &$form_state) {
  // Hide sort by and sort order field from exposed form
  if ($form['#id'] == "views-exposed-form-site-search-solr-page-1") {
    $current_path = \Drupal::service('path.current')->getPath();
    $result = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
    $path = explode("/",$result);
    if ($path[1] != 'search') {
      unset($form['sort_by']);
      unset($form['sort_order']);
	  }
  }

  // Set exposed form action to current page itself that includes full text search 
  $loader = \Drupal::service('domain.negotiator');
  $current_domain = $loader->getActiveDomain();
  $current_domain_id = $current_domain->id();
  if ($current_domain_id == "ggkp_domain" || $current_domain_id == "ggip_domain" || $current_domain_id == "ggfp_domain") {
    if ($form['#id'] != "views-exposed-form-site-search-solr-page-1") {
      if (\Drupal::moduleHandler()->moduleExists('facets_pretty_paths')) {
        $current_path = \Drupal::service('path.current')->getPath();
        $route_name   = \Drupal::routeMatch()->getRouteName();
        $current_route_name = \Drupal::service('current_route_match')->getRouteName();
        if ($current_path != '/resources' && $current_path != '/case-studies' && $current_path != '/national-documents' && $route_name != 'entity.node.canonical') {
          if ($current_route_name) {
              $form['#action'] = $current_path;
          }
        }
      }
    }
  }
  // Removing content type based on domain in "Manage All Contents" in Dashboard
  if ($form['#id'] == "views-exposed-form-manage-dashboard-page-18") {
    $loader = \Drupal::service('domain.negotiator');
    $current_domain = $loader->getActiveDomain();
    $current_domain_id = $current_domain->id();
    if ($current_domain_id == "ggkp_domain") {
	  unset($form['type']['#options']['financial_solutions']);
	  unset($form['type']['#options']['technical_assistant']);
	  unset($form['type']['#options']['business_sector']);
	  unset($form['type']['#options']['policies_and_regulations']);
	  unset($form['type']['#options']['multimedia']);
	}
	if ($current_domain_id == "ggip_domain") {
	  unset($form['type']['#options']['policies_and_regulations']);
	  unset($form['type']['#options']['academic_programme']);
	  unset($form['type']['#options']['sector']);
	  unset($form['type']['#options']['working_groups']);
	  unset($form['type']['#options']['national_documents']);
	}
	if ($current_domain_id == "ggfp_domain") {
	  unset($form['type']['#options']['financial_solutions']);
	  unset($form['type']['#options']['technical_assistant']);
	  unset($form['type']['#options']['business_sector']);
	  unset($form['type']['#options']['academic_programme']);
	  unset($form['type']['#options']['national_documents']);
    }
  }
  // Removing language filter from /admin/content/media.
  if ($form['#id'] == "views-exposed-form-media-media-page-list" || $form['#id'] == "views-exposed-form-media-library-page") {
    unset($form['langcode']);
  }
}

function ggkp_custom_preprocess_html(&$variables, $hook) {
  // Add class backend-page in all node add/edit page. 
  $current_path = \Drupal::service('path.current')->getPath();
  $url = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $route = \Drupal::routeMatch()->getRouteObject();
  $is_admin = FALSE;
  if (!empty($route)) {
    $has_node_operation_option = $route->getOption('_node_operation_route');
    $is_admin = $has_node_operation_option;
    if (preg_match('/node\/(\d+)\/edit/', $current_path, $matches) ||  strpos($url, "/node/add/") !== FALSE) {
      $variables['attributes']['class'][] = 'backend-page';
    }
  }

}

/**
 * Implements hook_page_attachments().
 *
 * Adds the ckeditor.indentblock.css with indentation css to each page.
 */
function ggkp_custom_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'ggkp_custom/indentblock';
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function ggkp_custom_system_breadcrumb_alter(Breadcrumb $breadcrumb, RouteMatchInterface $route_match, array $context) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  $current_path = \Drupal::service('path.current')->getPath();
  // Modify the braeadcrumbs based on the requirement.
  if ($route_name == "view.sme_detail_page.page_1") {
    $links = $breadcrumb->getLinks();
    $parent = [];
    foreach ($links as $key => $value) {
      $parent_name = '';

      $parent_names = explode(',', $value->getText());
      $parent_name = $parent_names[0];

      if (in_array($parent_name, $parent) && !empty($value->getUrl()->getRouteParameters())) {
        $breadcrumb->removeLink($links[$key]);
      }

      if (empty($value->getUrl()->getRouteParameters())) {
        $parent[] = $value->getText();
      }
    }
  }
  // Removed text 'Node' from the breadcrumbs in the node edit page
  if ($route_name == "entity.node.edit_form") {
    $links = $breadcrumb->getLinks();
    foreach ($links as $key => $value) {
      if ($value->getText() == 'Node') {
        $breadcrumb->removeLink($links[$key]);
      }
    }
  }
}

/* Removing sector and themes values listing in facets which is not in current domain  */
function ggkp_custom_preprocess_facets_item_list(array &$variables) {
  $items = $variables['items'];
  $i = 0;
  foreach($items as $k => $item) {
    $facet_id = $item['value']['#title']['#facet']->get('id');

    if ($facet_id == "case_studies_sectors" || $facet_id == "case_studies_theme" || $facet_id == "knowledge_sector" || $facet_id == "knowledge_theme"
    || $facet_id == "sectors_content" || $facet_id == "themes_content" || $facet_id == "academic_sector" || $facet_id == "academic_theme" ||
    $facet_id == "big_e_sectors" || $facet_id == "big_e_theme" || $facet_id == "course_sector" || $facet_id == "course_theme" || $facet_id == "financial_solutions_theme"
    || $facet_id == "guidance_sectors" || $facet_id == "guidance_theme" || $facet_id == "learning_sectors" || $facet_id == "learning_theme" || $facet_id == "techical_assistant_theme"
    || $facet_id == "sectors_tools_new" || $facet_id == "tools_theme" || $facet_id == "webinar_sector" || $facet_id == "webinar_theme" || $facet_id == "experts_sectors"
    || $facet_id == "expert_theme" || $facet_id == "finance_theme" || $facet_id == "gef_news_themes" || $facet_id == "initiative_sectors" || $facet_id == "initiative_knowledge_theme"
    || $facet_id == "gef_news_sectors" || $facet_id == "gef_know_sectors" || $facet_id == "gef_know_theme" || $facet_id == "blog_sector" || $facet_id == "blog_theme"
    || $facet_id == "job_sector" || $facet_id == "job_theme" || $facet_id == "multimedia_theme" || $facet_id == "multimedia_sectors" || $facet_id == "sectors"
    || $facet_id == "national_document_theme" || $facet_id == "news_sectors" || $facet_id == "news_theme" || $facet_id == "project_sectors"
    || $facet_id == "project_theme" || $facet_id == "search_sector" || $facet_id == "search_theme") {

      $loader = \Drupal::service('domain.negotiator');
          $current_domain = $loader->getActiveDomain();
      $current_domain_id = $current_domain->id();
      $nid = $item['value']['#title']['#raw_value'];
      $entity_object = \Drupal\node\Entity\Node::load($nid);
      $manager = \Drupal::service('domain_access.manager');
      $node_domain_check = $manager->getAccessValues($entity_object, 'field_domain_access');

      if (array_key_exists($current_domain_id, $node_domain_check)) {
        $new_items[$i] = $item;
      } 
      else {
        unset($item);
      }
    }
    if (isset($item)) {
      $new_items[$i] = $item;
      $i++;
    }
  }
  if (isset($new_items)) {
    $variables['items'] = $new_items;
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
/* hide sector and themes contents listing in detail page which is not in current domain */
function ggkp_custom_node_view(array &$build, $entity, $display, $view_mode) {

  $loader = \Drupal::service('domain.negotiator');
  $current_domain = $loader->getActiveDomain();
  $current_domain_id = $current_domain->id();

  $route_name = \Drupal::routeMatch()->getRouteName();

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($current_domain_id == "ggkp_domain" || $current_domain_id == "ggfp_domain" || $current_domain_id == "ggip_domain") {
  if ($route_name == "entity.node.canonical") {
    if ($node->bundle() == "case_studies" || $node->bundle() == "research" || $node->bundle() == "policies_and_regulations"
    || $node->bundle() == "tools_and_platforms" || $node->bundle() == "platforms" || $node->bundle() == "guidance" || $node->bundle() == "webinars"  || $node->bundle() == "blog"
    || $node->bundle() == "courses" || $node->bundle() == "multimedia" || $node->bundle() == "jobs" || $node->bundle() == "news"
    || $node->bundle() == "financial_solutions" || $node->bundle() == "technical_assistant" || $node->bundle() == "academic_programme"
    || $node->bundle() == "national_documents"  || $node->bundle() == "project") {

      if ($node instanceof \Drupal\node\NodeInterface) {
        // You can get nid and anything else you need from the node object.
        $nid = $node->id();
        $sector = $node->get('field_content_sectors')->referencedEntities();
        $themes = $node->get('field_content_theme')->referencedEntities();
      }

      if (isset($sector) && $sector != '') {
        foreach ($sector as $key => $value) {
        $sec_id[] = $value->get('nid')->value;
        }
      }
      if (isset($themes) && $themes != '') {
        foreach ($themes as $key => $value1) {
        $themes_id[] = $value1->get('nid')->value;
        }
      }

      $new_items_sectors = '';
      if (isset($sec_id) && $sec_id != '') {
      $i = 0;
        foreach($sec_id as $key => $sec_val_id) {
      $sec_entity_object = \Drupal\node\Entity\Node::load($sec_val_id);
      $sec_title = $sec_entity_object->getTitle();
      $sec_link = Link::createFromRoute($sec_title, 'entity.node.canonical', ['node' => $sec_val_id])->toString();
        $manager = \Drupal::service('domain_access.manager');
          $node_domain_check = $manager->getAccessValues($sec_entity_object, 'field_domain_access');

        if (array_key_exists($current_domain_id, $node_domain_check)) {
            if ($new_items_sectors == '') {
                $new_items_sectors .= $sec_link;
            } else {
              $new_items_sectors .= ',' . $sec_link;
            }

          } else {
            unset($sec_entity_object);
          }
        $i++;
      }
      }
      $build['field_content_sectors'] = array(
        '#markup' => $new_items_sectors,
        '#weight' => 3, // Weight to re-arrange your display.
      );

      $new_items_themes = '';
      if (isset($themes_id) && $themes_id != '') {
      $i = 0;
        foreach($themes_id as $key => $themes_val_id) {
      $themes_entity_object = \Drupal\node\Entity\Node::load($themes_val_id);
      $themes_title = $themes_entity_object->getTitle();
      $themes_link = Link::createFromRoute($themes_title, 'entity.node.canonical', ['node' => $themes_val_id])->toString();
        $manager = \Drupal::service('domain_access.manager');
          $node_domain_check = $manager->getAccessValues($themes_entity_object, 'field_domain_access');

        if (array_key_exists($current_domain_id, $node_domain_check)) {
        if ($new_items_themes == '') {
          $new_items_themes .= $themes_link;
          } else {
          $new_items_themes .= ',' . $themes_link;
        }
        } else {
        unset($themes_entity_object);
        }
        $i++;
      }
    }

    $build['field_content_theme'] = array(
        '#markup' => $new_items_themes,
        '#weight' => 4, // Weight to re-arrange your display.
    );
    }
    // if organisation node is present, then replace the link of the organisation taxonomy to the organisation node
    if ($node->bundle() == "case_studies" || $node->bundle() == "research"
    || $node->bundle() == "tools_and_platforms" || $node->bundle() == "platforms" || $node->bundle() == "guidance" || $node->bundle() == "webinars"
    || $node->bundle() == "courses" || $node->bundle() == "multimedia" || $node->bundle() == "jobs" || $node->bundle() == "news"
    || $node->bundle() == "financial_solutions" || $node->bundle() == "technical_assistant" || $node->bundle() == "academic_programme"
    || $node->bundle() == "national_documents"  || $node->bundle() == "project" || $node->bundle() == "event") {
      $organizations = $node->get('field_organisation')->referencedEntities();
      if (isset($organizations) && $organizations != '') {
        $organization_markup = '';
        foreach ($organizations as $key => $value) {
          //$term = Term::load($tid);
          //$name = $term->getName();
          $tid = $value->get('tid')->value;
          $term_name = $value->getName();
          if ($value->field_organization_node->target_id == '') {
            $organization_name = $term_name;
          } else {
            $organization_name = Link::createFromRoute($term_name, 'entity.node.canonical', ['node' => $value->field_organization_node->target_id])->toString();
          }

          if ($organization_markup == '') {
            $organization_markup .= $organization_name;
          } else {
            $organization_markup .= ', ' . $organization_name;
          }
        }
        $build['field_organisation'] = array(
          '#markup' => $organization_markup,
          '#weight' => 4, // Weight to re-arrange your display.
        );
      }
    }
  }
  }
}

/**
 * Implements hook_element_info_alter().
 */
function ggkp_custom_element_info_alter(array &$types) {
  if (isset($types['radios'])) {
    $types['radios']['#process'][] = 'remove_radio_na';
  }
}

/*Then create the process function. Let say that you have several boolean fields and you would like to remove 
the n/a option only for the field "field_bool_no_na"*/

function remove_radio_na($element) {
  if (isset($element['#field_name'])) {
    if ($element['#field_name']=='field_cost_type') {
      unset($element['_none']);
    }
    if ($element['#field_name']=='field_instruction') {
      unset($element['_none']);
    }
  }
  return $element;
}

// unset draft nodes from quickedit
function ggkp_custom_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'quick_edit' && $view->current_display == 'page_2') {
    foreach ($view->result as $key => $value) {
      $nid = $value->_entity->get('nid')->value;
      $query = \Drupal::database()->select('content_moderation_state_field_revision', 'c');
      $query->fields('c', ['moderation_state']);
      $query->condition('c.content_entity_id', $nid, '=');
      $result = $query->execute()->fetchAll();
      $moderation_state = end($result)->moderation_state;//print $moderation_state;exit;
      if ($moderation_state == "draft" || $moderation_state == "push_to_review") {
        unset($view->result[$key]);
      } 
    }
  }
}

function ggkp_custom_preprocess_views_view_field(&$variables) {
  // Redirect to original domain when user click on the title, edit , delete link in the manage dashboard pages.
  // If the content tagged to multiple domain, then redirected GPP if selected otherwise next domain.
  $view = $variables['view'];
  $field = $variables['field'];
  if (($view->id() == 'manage_dashboard' && $view->current_display == 'page_6') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_15')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_3') || ($view->id() == 'hero' && $view->current_display == 'page_11')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_1') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_8')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_18') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_11')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_7') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_13')
    || ($view->id() == 'hero' && $view->current_display == 'page_4') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_10')
    || ($view->id() == 'hero' && $view->current_display == 'page_12') || ($view->id() == 'hero' && $view->current_display == 'page_2')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_12') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_26')
    || ($view->id() == 'hero' && $view->current_display == 'page_3') || ($view->id() == 'hero' && $view->current_display == 'page_13')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_19') || ($view->id() == 'hero' && $view->current_display == 'page_1')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_16') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_9')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_17') || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_20')
    || ($view->id() == 'manage_dashboard' && $view->current_display == 'page_22') || ($view->id() == 'manage_external_user_dashboard' && $view->current_display == 'page_2')
    || ($view->id() == 'manage_external_user_dashboard' && $view->current_display == 'page_3') || ($view->id() == 'hero' && $view->current_display == 'page_5')
    || ($view->id() == 'hero' && $view->current_display == 'page_8') || ($view->id() == 'hero' && $view->current_display == 'page_9')) {
      $loader = \Drupal::service('domain.negotiator');
      $current_domain = $loader->getActiveDomain();
      $current_domain_id = $current_domain->id();
      if($current_domain_id == 'ggkp_main_domain') {
        if($field->field == 'title' || $field->field == 'edit_node' || $field->field == 'delete_node') {
          $row = $variables['row']->_entity;
          $title_value =  $row->title->getValue()[0]['value'];
          $nid = $row->get('nid')->value;
          $node_object = \Drupal\node\Entity\Node::load($nid);
          $manager = \Drupal::service('domain_access.manager');
          $node_domain_check = $manager->getAccessValues($node_object, 'field_domain_access');
          if(is_array($node_domain_check) && count($node_domain_check) > 1) {
            if(array_key_exists('ggkp_domain', $node_domain_check)) {
              $domainId = 'ggkp_domain';
            }
            else {
              $domainId = array_key_first($node_domain_check);
            }
          }
          else {
            $domainId = array_key_first($node_domain_check);
            if($domainId == '') {
              $domainId = 'ggkp_domain';
            }
          }
          $domain = \Drupal::entityTypeManager()->getStorage('domain')->load($domainId);
          if($field->field == 'title') {
            $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/'.$nid);
            $url = '<a href=' .$domain->getPath() . ltrim($alias, '/') .' target="_blank">'. $title_value.'</a>';
            $variables['output'] =  [
              '#markup' => $url,
              '#allowed_tags' => ['a']
            ];
          }
          if($field->field == 'edit_node') {
            $url = '<a href=" '.$domain->getPath() . 'user/login" target="_blank">Edit</a>';
            $variables['output'] =  [
              '#markup' => $url,
              '#allowed_tags' => ['a']
            ];

          }
          if($field->field == 'delete_node') {
            $url = '<a href=" '.$domain->getPath() . 'user/login" target="_blank">Delete</a>';
            $variables['output'] =  [
              '#markup' => $url,
              '#allowed_tags' => ['a']
            ];
          }
          
        }
      }
  }
  //Change the values shown in the combined view //review-contents. This page includes anonymous content and initiative manager content.
  if ($view->id() == "manage_dashboard" && $view->current_display == "page_27") {
    $row = $variables['row']->_entity;
    $nid = $row->get('nid')->value;
    $node_object = \Drupal\node\Entity\Node::load($nid);
    $content_type = $node_object->type->entity->label();
    
    if($field->field == 'type') {
      $type = $variables['output']->__toString();
      if($type == 'Upload Data') {
        $type = $node_object->get('field_content')->view()[0]['#markup'];
      }
      $variables['output'] =  [
        '#markup' => $type,
        '#allowed_tags' => ['a']
      ];
    }
    if($field->field == 'status') {
      $status = $variables['output']->__toString();
      
      if($status == "Yes") {       
        if($content_type != 'Upload Data') {
          $variables['output'] =  [
            '#markup' => 'Published to Initiative',
            '#allowed_tags' => ['a']
          ];
        }

      }

    }

    
  }

  
}

/**
 * Preprocess page title
 */
function ggkp_custom_preprocess_page_title(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  $node_type = FALSE;
  // Change the title of the node add form of External user (upload_data)
  if ($route_name == 'node.add') {
    $path = \Drupal::request()->getpathInfo();
    $arg = explode('/', $path);
    $lang_code = \Drupal::languageManager()->getCurrentLanguage()->getId();
    if ($lang_code == 'en') {
      $node_type = $arg[3];
    }
    else {
      $node_type = $arg[4];
    }
    if ($node_type == 'upload_data') {
      $variables['title'] = 'Share with GGKP your knowledge resource';
    }
  }
}

